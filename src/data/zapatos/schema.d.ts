/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.5.1), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 101 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace exam {
    export type Table = 'exam';
    export interface Selectable {
      /**
      * **exam.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **exam.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **exam.school_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      school_name: string;
      /**
      * **exam.instructions**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      instructions: string;
      /**
      * **exam.exam_date**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      exam_date: Date;
      /**
      * **exam.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted: boolean;
      /**
      * **exam.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **exam.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **exam.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **exam.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **exam.school_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      school_name: string;
      /**
      * **exam.instructions**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      instructions: string;
      /**
      * **exam.exam_date**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      exam_date: db.DateString;
      /**
      * **exam.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted: boolean;
      /**
      * **exam.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at: db.DateString;
      /**
      * **exam.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.DateString;
    }
    export interface Whereable {
      /**
      * **exam.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.school_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      school_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.instructions**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      instructions?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.exam_date**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      exam_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **exam.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **exam.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **exam.school_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      school_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **exam.instructions**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      instructions: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **exam.exam_date**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      exam_date: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment;
      /**
      * **exam.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted: boolean | db.Parameter<boolean> | db.SQLFragment;
      /**
      * **exam.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment;
      /**
      * **exam.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **exam.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **exam.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **exam.school_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      school_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **exam.instructions**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      instructions?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **exam.exam_date**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      exam_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment>;
      /**
      * **exam.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
      /**
      * **exam.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment>;
      /**
      * **exam.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'exam_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace exam_question {
    export type Table = 'exam_question';
    export interface Selectable {
      /**
      * **exam_question.exam_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exam_id: string;
      /**
      * **exam_question.question_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      question_id: string;
    }
    export interface JSONSelectable {
      /**
      * **exam_question.exam_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exam_id: string;
      /**
      * **exam_question.question_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      question_id: string;
    }
    export interface Whereable {
      /**
      * **exam_question.exam_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exam_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam_question.question_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      question_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **exam_question.exam_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exam_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **exam_question.question_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      question_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **exam_question.exam_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exam_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **exam_question.question_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      question_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'exam_question_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace migrations {
    export type Table = 'migrations';
    export interface Selectable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('migrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **migrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: Date;
    }
    export interface JSONSelectable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('migrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **migrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: db.DateString;
    }
    export interface Whereable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **migrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **migrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **migrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace question {
    export type Table = 'question';
    export interface Selectable {
      /**
      * **question.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **question.topic_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      topic_id: string;
      /**
      * **question.stage**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      stage: string;
      /**
      * **question.difficulty**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      difficulty: string;
      /**
      * **question.marks**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      marks: number;
      /**
      * **question.answer_size**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      answer_size: number;
      /**
      * **question.question**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      question: string;
      /**
      * **question.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted: boolean;
      /**
      * **question.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **question.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **question.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **question.topic_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      topic_id: string;
      /**
      * **question.stage**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      stage: string;
      /**
      * **question.difficulty**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      difficulty: string;
      /**
      * **question.marks**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      marks: number;
      /**
      * **question.answer_size**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      answer_size: number;
      /**
      * **question.question**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      question: string;
      /**
      * **question.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted: boolean;
      /**
      * **question.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at: db.DateString;
      /**
      * **question.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.DateString;
    }
    export interface Whereable {
      /**
      * **question.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **question.topic_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      topic_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **question.stage**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      stage?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **question.difficulty**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      difficulty?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **question.marks**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      marks?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **question.answer_size**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      answer_size?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **question.question**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      question?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **question.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **question.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **question.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **question.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **question.topic_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      topic_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **question.stage**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      stage: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **question.difficulty**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      difficulty: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **question.marks**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      marks: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **question.answer_size**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      answer_size: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **question.question**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      question: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **question.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted: boolean | db.Parameter<boolean> | db.SQLFragment;
      /**
      * **question.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment;
      /**
      * **question.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **question.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **question.topic_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      topic_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **question.stage**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      stage?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **question.difficulty**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      difficulty?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **question.marks**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      marks?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **question.answer_size**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      answer_size?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **question.question**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      question?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **question.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
      /**
      * **question.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment>;
      /**
      * **question.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'question_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace topic {
    export type Table = 'topic';
    export interface Selectable {
      /**
      * **topic.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **topic.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **topic.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **topic.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted: boolean;
      /**
      * **topic.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **topic.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **topic.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **topic.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **topic.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **topic.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted: boolean;
      /**
      * **topic.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at: db.DateString;
      /**
      * **topic.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.DateString;
    }
    export interface Whereable {
      /**
      * **topic.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **topic.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **topic.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **topic.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **topic.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **topic.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **topic.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **topic.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **topic.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **topic.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted: boolean | db.Parameter<boolean> | db.SQLFragment;
      /**
      * **topic.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment;
      /**
      * **topic.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **topic.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **topic.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **topic.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **topic.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_deleted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
      /**
      * **topic.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      created_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment>;
      /**
      * **topic.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'topic_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = exam.Table | exam_question.Table | migrations.Table | question.Table | topic.Table;
  export type Selectable = exam.Selectable | exam_question.Selectable | migrations.Selectable | question.Selectable | topic.Selectable;
  export type JSONSelectable = exam.JSONSelectable | exam_question.JSONSelectable | migrations.JSONSelectable | question.JSONSelectable | topic.JSONSelectable;
  export type Whereable = exam.Whereable | exam_question.Whereable | migrations.Whereable | question.Whereable | topic.Whereable;
  export type Insertable = exam.Insertable | exam_question.Insertable | migrations.Insertable | question.Insertable | topic.Insertable;
  export type Updatable = exam.Updatable | exam_question.Updatable | migrations.Updatable | question.Updatable | topic.Updatable;
  export type UniqueIndex = exam.UniqueIndex | exam_question.UniqueIndex | migrations.UniqueIndex | question.UniqueIndex | topic.UniqueIndex;
  export type Column = exam.Column | exam_question.Column | migrations.Column | question.Column | topic.Column;
  export type AllTables = [exam.Table, exam_question.Table, migrations.Table, question.Table, topic.Table];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = {
    exam: exam.Selectable;
    exam_question: exam_question.Selectable;
    migrations: migrations.Selectable;
    question: question.Selectable;
    topic: topic.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    exam: exam.JSONSelectable;
    exam_question: exam_question.JSONSelectable;
    migrations: migrations.JSONSelectable;
    question: question.JSONSelectable;
    topic: topic.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    exam: exam.Whereable;
    exam_question: exam_question.Whereable;
    migrations: migrations.Whereable;
    question: question.Whereable;
    topic: topic.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    exam: exam.Insertable;
    exam_question: exam_question.Insertable;
    migrations: migrations.Insertable;
    question: question.Insertable;
    topic: topic.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    exam: exam.Updatable;
    exam_question: exam_question.Updatable;
    migrations: migrations.Updatable;
    question: question.Updatable;
    topic: topic.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    exam: exam.UniqueIndex;
    exam_question: exam_question.UniqueIndex;
    migrations: migrations.UniqueIndex;
    question: question.UniqueIndex;
    topic: topic.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    exam: exam.Column;
    exam_question: exam_question.Column;
    migrations: migrations.Column;
    question: question.Column;
    topic: topic.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    exam: exam.SQL;
    exam_question: exam_question.SQL;
    migrations: migrations.SQL;
    question: question.SQL;
    topic: topic.SQL;
  }[T];

}
